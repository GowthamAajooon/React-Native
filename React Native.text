commands 

install nodejs
PS D:\demo> npm install -g expo-cli	
PS D:\demo> expo init learn-demo
PS D:\demo> cd .\learn-demo
PS D:\demo\demo> npx expo start
PS D:\demo\demo> npx expo install react-native-web react-dom @expo/metro-runtime
PS D:\demo\demo> npx expo start




--------------------------------------------------------------------------------------------------------------------------------------------------------
-- MYSQL

CREATE DATABASE learn_demo;
USE learn_demo;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50) Not Null,
  phone_number VARCHAR(15) NOT NULL
);

--------------------------------------------------------------------------------------------------------
// App.js

npm install axios
npm install @react-navigation/native
npm install @react-navigation/stack


import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from './screens/HomeScreen';

const Stack = createStackNavigator();

const App = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Home"
          component={HomeScreen}
          options={{ headerShown: false }} // Hide the default header if you want to use your custom title bar
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default App;
---------------------------------------------------------------------------------------------------------------------------
// HomeScreen.js

import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';
import axios from 'axios';

const HomeScreen = () => {
  const [name, setName] = useState('');
  const [mobileNumber, setMobileNumber] = useState('');

  const validateAndSubmit = () => {
    // Validate name
    if (name.length === 0 || name.length > 50) {
      Alert.alert('Error', 'Name must be between 1 and 50 characters.');
      return;
    }

    // Validate mobile number (10 digits)
    if (!/^\d{10}$/.test(mobileNumber)) {
      Alert.alert('Error', 'Mobile number must be exactly 10 digits.');
      return;
    }

    // Submit data to backend
    axios.post('http://192.168.101.153:3000/register', { name, phone_number: mobileNumber })
      .then(response => {
        Alert.alert('Success', 'User registered successfully!');
      })
      .catch(error => {
        Alert.alert('Error', 'Failed to register user.');
        console.error(error);
      });
  };

  return (
    <View style={styles.container}>
      <View style={styles.titleBar}>
        <Text style={styles.title}>Learn-demo</Text>
      </View>
      <View style={styles.body}>
        <TextInput
          style={styles.input}
          placeholder="Enter your name"
          value={name}
          onChangeText={setName}
        />
        <TextInput
          style={styles.input}
          placeholder="Enter your mobile number"
          keyboardType="numeric"
          value={mobileNumber}
          onChangeText={setMobileNumber}
        />
        <Button title="Submit" onPress={validateAndSubmit} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: 'lightblue' },
  titleBar: { padding: 16, backgroundColor: 'darkblue' },
  title: { color: 'white', fontSize: 20, textAlign: 'center' },
  body: { padding: 16 },
  input: {
    height: 50,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 16,
    paddingHorizontal: 8,
  },
});

export default HomeScreen;
-----------------------------------------------------------------------------------------------------------------------------------------------------
// server.js

// npm install express mysql2 body-parser cors

const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors());

const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'dhan',
  database: 'learn_demo'
});

db.connect((err) => {
  if (err) throw err;
  console.log('Connected to MySQL Database');
});

app.post('/register', (req, res) => {
  const { name, phone_number } = req.body;

  const sql = 'INSERT INTO users (name, phone_number) VALUES (?, ?)';
  db.query(sql, [name, phone_number], (err, result) => {
    if (err) {
      console.error(err);
      res.status(500).json({ message: 'Failed to register user' });
    } else {
      res.status(200).json({ message: 'User registered successfully' });
    }
  });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

-----------------------------------------------------------------------------------------------------------------------------------------------------
npx expo start
-----------------------------------------------------------------------------------------------------------------------------------------------------
eas login 

gowthaminayam
password - Gowt****

eas build:configure

npx expo prebuild

PS D:\learn\learn-demo> eas build:configure
PS D:\learn\learn-demo> eas build -p android --profile preview










---------------------------------------------------------------------------------------------------------------------------------------------------
                                                        DOCKER DEPLOYMENT
---------------------------------------------------------------------------------------------------------------------------------------------------

docker build -t my-react-app-image .
docker run -d -p 3005:3005 --name my-react-app-container my-react-app-image
docker stop my-react-app-container
docker rm my-react-app-container
docker run -d -p 3002:3002 --name my-react-app-container my-react-app-image




 -----------------------------------------------------------------------------------------------------------------------------------------------------
 PS D:\learn\learn-demo> eas login        
You are already logged in as gowthaminayam.
‚àö Do you want to continue? ... yes
Log in to EAS with email or username (exit and run eas login --help to see other login options)
‚àö Email or username ... gowthaminayam
‚àö Password ... ********
Logged in
PS D:\learn\learn-demo> eas build:configure
EAS project not configured.
‚àö Existing EAS project found for @gowthaminayam/learn-demo (id = 42da0a06-4c81-4e4d-a52b-ddf51bb04b8a). Configure this project? ... yes
‚úî Linked local project to EAS project 42da0a06-4c81-4e4d-a52b-ddf51bb04b8a
üí° The following process will configure your iOS and/or Android project to be compatible with EAS Build. These changes only apply to your local project files and you can safely revert them at any time.

‚àö Which platforms would you like to configure for EAS Build? ¬ª Android

‚àö Generated eas.json. Learn more: https://docs.expo.dev/build-reference/eas-json/

üéâ Your project is ready to build.

- Run eas build when you are ready to create your first build.
- Once the build is completed, run eas submit to upload the app to app stores.
- Learn more about other capabilities of EAS Build: https://docs.expo.dev/build/introduction
PS D:\learn\learn-demo> eas build -p android --profile preview
Loaded "env" configuration for the "preview" profile: no environment variables specified. Learn more: https://docs.expo.dev/build-reference/variables/

üìù  Android application id Learn more: https://expo.fyi/android-package
‚àö What would you like your Android application id to be? ... com.gowthaminayam.learndemo
‚úî Using remote Android credentials (Expo server)
‚úî Using Keystore from configuration: Build Credentials qRIINTlpqf (default)

Compressing project files and uploading to EAS Build. Learn more: https://expo.fyi/eas-build-archive
‚úî Uploaded to EAS 1s

Build details: https://expo.dev/accounts/gowthaminayam/projects/learn-demo/builds/29639268-5755-48d4-a094-e1fb0aa855e4

Waiting for build to complete. You can press Ctrl+C to exit.
| Build in progress...
